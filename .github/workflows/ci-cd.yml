name: NotaFácil CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        default: false
        type: boolean

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: notafacil_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for testing
        run: |
          echo "# Configuración de base de datos" > .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/notafacil_test?sslmode=disable" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_NAME=notafacil_test" >> .env
          echo "TEST_DB_NAME=notafacil_test" >> .env
          echo "SSLMODE=disable" >> .env
          echo "PORT=3000" >> .env
          echo "NODE_ENV=test" >> .env

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: dist/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || github.event.inputs.deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: dist/

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Setup deployment directory
        run: |
          mkdir -p deployment
          cp -r dist/* deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          mkdir -p deployment/scripts
          
          # Crear script de post-deploy para setup en servidor
          cat > deployment/scripts/post-deploy.sh << 'EOF'
          #!/bin/bash
          cd /opt/notafacil
          # Instalar dependencias de producción
          npm ci --only=production
          # Crear archivo .env si no existe (usando plantilla)
          if [ ! -f .env ]; then
            cp .env.production .env
          fi
          # Reiniciar servicio
          pm2 reload notafacil || pm2 start dist/infrastructure/server.js --name notafacil
          EOF
          
          chmod +x deployment/scripts/post-deploy.sh

      - name: Deploy to VPS
        run: |
          # Ejecutar comandos de despliegue en el servidor
          ssh cicd@ssh.urbanlink.pe -p 2222 << EOF
            cd /opt/apps/notafacil || exit 1
            git pull origin ${GITHUB_REF##*/}
            sudo /usr/local/bin/docker-compose -f /opt/apps/notafacil/docker-compose.yml pull app
            sudo /usr/local/bin/docker-compose -f /opt/apps/notafacil/docker-compose.yml up -d --build --force-recreate
            sudo /usr/bin/docker ps
          EOF